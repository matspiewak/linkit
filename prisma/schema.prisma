// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  page          Page?
}

model Page {
  id            String     @id @default(cuid())
  user_id       String     @unique
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  LinkStyle     LinkStyle?
  link_style_id String?    @unique
  Style         Style?
  style_id      String?    @unique
  Profile       Profile?
  profile_id    String?    @unique
  Link          Link[]
  slug          String     @unique
}

model Style {
  id               String   @id @default(cuid())
  page_id          String   @unique
  page             Page     @relation(fields: [page_id], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  background_color String   @default("#ffffff")
  effect           String   @default("coming soon")
}

model LinkStyle {
  id               String   @id @default(cuid())
  page_id          String   @unique
  page             Page     @relation(fields: [page_id], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  border           String   @default("4px black solid")
  radius           String   @default("0px")
  shadow           String   @default("0px 0px 0px black")
  background_color String   @default("#ffffff")
  font_color       String   @default("#000000")
  font_size        String   @default("16px")
  font_family      String   @default("sans-serif")
  font_weight      String   @default("normal")
  font_style       String   @default("normal")
}

model Link {
  id        String   @id @default(cuid())
  page_id   String
  page      Page     @relation(fields: [page_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  text      String
  url       String
  icon      String   @db.LongText
  order     Int
  visible   Boolean  @default(true)
}

model Profile {
  id     String @id @default(cuid())
  title  String @unique
  bio    String
  image  String
  page   Page?  @relation(fields: [pageId], references: [id])
  pageId String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
